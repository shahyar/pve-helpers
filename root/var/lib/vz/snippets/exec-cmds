#!/bin/bash

VMID="$1"
ACTION="$2"
SLEPT=""

vmpid() {
  cat "/var/run/qemu-server/$VMID.pid"
}

if_action() {
  if [[ "$ACTION" == "$1" ]]; then
    shift
    eval "$@"
  fi
}

# With a given list of ranges of CPU cores (ie. 0-15 or 1,2) and a VM core
# number, get a deterministic CPU core from the list. This allows exact
# replication of host topology onto a guest, instead of an affinity range.
# usage: get_affinity_core LIST CORE
# example with 1,3-7,9,11-15: CORE 0 = 1, 2 = 4, 11 = 15, 12 = 1
get_affinity_core() {
  cpulist=$1
  corenum=$2

  until [ $corenum -lt 0 ]; do
    for i in ${cpulist//,/ }; do
      nums=( ${i//-/ } )
      min=( ${nums[0]}  )
      max=( ${nums[1]:-$min} )

      for cpucore in $(seq $min $max); do
        if [ $corenum -eq 0 ]; then
          echo "$cpucore"
          return
        fi

        ((corenum=corenum-1))
      done
    done
  done
}

sleep_once() {
  if [[ -z "$SLEPT" ]]; then
    sleep 1s
    SLEPT=1
  fi
}

hostpci_ids() {
  grep '^hostpci[0-9]:.*' "/etc/pve/qemu-server/$VMID.conf" | awk '{print $2}' | awk -F, '{print $1}'
}

exec_pci_rescan() {
  echo "Running PCI rescan for $VMID..."
  echo 1 > /sys/bus/pci/rescan
}

exec_set_haltpoll() {
  echo "Setting haltpoll for $VMID..."
  echo $1 > /sys/module/kvm/parameters/halt_poll_ns
}

exec_assign_interrupts() {
  local SLEEP="30s"
  if [[ $1 == --sleep=* ]]; then
    SLEEP="${1#--sleep=}"
    shift
  fi

  echo "Wating $SLEEP seconds for all vfio-gpu interrupts to show up..."
  sleep "$SLEEP"

  CPULIST="$1"
  shift

  if [[ "$1" == "--all" ]]; then
    set -- $(hostpci_ids)
  fi

  count=0
  for interrupt; do
    interrupt=$(printf '%b' "${interrupt//%/\\x}")
    ((count=count+1))
    MASK=$(get_affinity_core "$CPULIST" "$count")
    echo "Moving VM $VMID interrupt $interrupt to core #$MASK..."
    grep "$interrupt" /proc/interrupts | cut -d ":" -f 1 | while read -r i; do
      echo "- IRQ: $(grep "^\s*$i:" /proc/interrupts)"
      #echo "$MASK" > /proc/irq/$i/smp_affinity_list
    done
  done
}

exec_pci_unbind() {
  if [[ "$1" == "--all" ]]; then
    set -- $(hostpci_ids)
  else
    set -- "0000:$1:$2.$3"
  fi

  for devid; do
    if [[ -e "/sys/bus/pci/devices/$devid" ]]; then
      echo "Running PCI unbind of '$devid' for $VMID..."
      echo 1 > "/sys/bus/pci/devices/$devid/remove"
    elif [[ -e "/sys/bus/pci/devices/$devid.0" ]]; then
      echo "Running PCI unbind of '$devid.0' for $VMID..."
      echo 1 > "/sys/bus/pci/devices/$devid.0/remove"
    else
      echo "The '$devid' not found in '/sys/bus/pci/devices'"
    fi
  done
}

exec_cpu_taskset() {
  sleep_once

  # Set general affinity on the parent kvm process
  echo "Running taskset with $1 for $(vmpid)..."
  taskset -a -p -c "$1" "$(vmpid)"

  # Isolate each guest core to a specific host core
  for line in $( ps -o spid,cpuid,comm -T -p $(vmpid) | grep " CPU " | awk '{print $1 "/" $4}' ); do
      info=( ${line//\// } )
      cpupid=( ${info[0]} )
      coreid=( ${info[1]} )
      hostcore=$(get_affinity_core "$1" "$coreid")

      echo "Running taskset with $hostcore for core #$coreid on $cpupid"
      taskset -p --cpu-list $hostcore $cpupid
  done

  echo ""
}

exec_cpu_chrt() {
  sleep_once

  echo "Running chrt with $1:$2 for $(vmpid)..."
  chrt -v "--$1" -a -p "$2" "$(vmpid)"
  echo ""
}

exec_qm_conflict() {
  echo "Conflicting with other VM$1, shutdown just in case..."
  qm shutdown "$1"
}

exec_qm_depends() {
  echo "VM$1 is required, ensure that it is started..."
  qm start "$1"
}

exec_cmds() {
  while read CMD ARG1 ARG2 ARG3 REST; do
    case "$CMD" in
      "#pci_rescan")
        if_action pre-start exec_pci_rescan
        ;;

      "#cpu_taskset")
        if_action post-start exec_cpu_taskset "$ARG1"
        ;;

      "#set_halt_poll")
        if_action post-start exec_set_haltpoll "$ARG1"
        ;;

      "#assign_interrupts")
        if_action post-start exec_assign_interrupts "$ARG1" "$ARG2" "$ARG3" $REST
        ;;

      "#cpu_chrt")
        if_action post-start exec_cpu_chrt "${ARG1:-fifo}" "${ARG2:-1}"
        ;;

      "#qm_depends")
        if_action post-start exec_qm_depends "$ARG1"
        ;;

      "#pci_unbind")
        if_action post-stop exec_pci_unbind "$ARG1" "$ARG2" "$ARG3"
        ;;

      "#pci_unbind_all")
        if_action post-stop exec_pci_unbind_all
        ;;

      "#pci_rebind")
        if_action post-stop exec_pci_rescan
        ;;

      "#qm_conflict")
        if_action pre-start exec_qm_conflict "$ARG1"
        ;;

      "#qm_*"|"#cpu_*"|"#pci_*"|"#set_*"|"#assign_*")
        echo "exec-cmds: command is unknown '$CMD'"
        ;;
    esac
  done
}

echo "Running exec-cmds for $VMID on $ACTION..."

exec_cmds < "/etc/pve/qemu-server/$VMID.conf"

exit 0
